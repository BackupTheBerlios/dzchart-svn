unit Testu_dzStackTemplateTest;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework,
  Classes,
  u_MyItemStack,
  u_MyItem;

type
  // Test methods for class TMyItemStack
  TestTMyItemStack = class(TTestCase)
  strict private
    FMyItemStack: TMyItemStack;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure testPush;
    procedure testPop;
  end;

implementation

const
  MAX_DEPTH = 100;

procedure TestTMyItemStack.SetUp;
begin
  FMyItemStack := TMyItemStack.Create;
end;

procedure TestTMyItemStack.TearDown;
begin
  FMyItemStack.Free;
  FMyItemStack := nil;
end;

procedure TestTMyItemStack.testPush;
var
  i: integer;
  Item: TMyItem;
begin
  CheckEquals(true, FMyItemStack.IsEmpty);
  CheckEquals(0, FMyItemStack.Depth);
  for i := 1 to MAX_DEPTH do begin
    FMyItemStack.Push(TMyItem.Create(i));
    CheckEquals(i, FMyItemStack.Depth);
    Item := FMyItemStack.Peek;
    CheckEquals(i, Item.Key);
  end;
end;

procedure TestTMyItemStack.testPop;
var
  Item: TMyItem;
  i: integer;
begin
  testPush;
  CheckEquals(MAX_DEPTH, FMyItemStack.Depth);
  for i := MAX_DEPTH downto 1 do begin
    Item := FMyItemStack.Peek;
    CheckEquals(i, FMyItemStack.Depth);
    CheckEquals(i, Item.Key);
    Item := FMyItemStack.Pop;
    CheckEquals(i - 1, FMyItemStack.Depth);
    CheckEquals(i, Item.Key);
    Item.Free;
  end;
  CheckEquals(0, FMyItemStack.Depth);
  CheckEquals(true, FMyItemStack.IsEmpty);
end;

initialization
  RegisterTest(TestTMyItemStack.Suite);
end.

