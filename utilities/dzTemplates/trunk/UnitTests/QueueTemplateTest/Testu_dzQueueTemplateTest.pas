unit Testu_dzQueueTemplateTest;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework,
  u_MyItemQueue,
  Classes,
  u_MyItem;

type
  // Test methods for class TMyItemQueue
  TestTMyItemQueue = class(TTestCase)
  strict private
    FMyItemQueue: TMyItemQueue;
  private
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure testPush;
    procedure testPop;
  end;

implementation

const
  MAX_COUNT = 100;

procedure TestTMyItemQueue.SetUp;
begin
  FMyItemQueue := TMyItemQueue.Create;
end;

procedure TestTMyItemQueue.TearDown;
begin
  FMyItemQueue.Free;
  FMyItemQueue := nil;
end;

procedure TestTMyItemQueue.testPush;
var
  i: integer;
  Item: TMyItem;
begin
  CheckEquals(true, FMyItemQueue.IsEmpty);
  CheckEquals(0, FMyItemQueue.Count);
  for i := 1 to MAX_COUNT do begin
    FMyItemQueue.Push(TMyItem.Create(i));
    CheckEquals(i, FMyItemQueue.Count);
    Item := FMyItemQueue.Peek;
    CheckEquals(1, Item.Key);
  end;
end;

procedure TestTMyItemQueue.testPop;
var
  Item: TMyItem;
  i: integer;
begin
  testPush;
  CheckEquals(MAX_COUNT, FMyItemQueue.Count);
  for i := MAX_COUNT downto 1 do begin
    Item := FMyItemQueue.Peek;
    CheckEquals(i, FMyItemQueue.Count);
    CheckEquals(MAX_COUNT - i + 1, Item.Key);
    Item := FMyItemQueue.Pop;
    CheckEquals(i - 1, FMyItemQueue.Count);
    CheckEquals(MAX_COUNT - i + 1, Item.Key);
    Item.Free;
  end;
  CheckEquals(0, FMyItemQueue.Count);
  CheckEquals(true, FMyItemQueue.IsEmpty);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTMyItemQueue.Suite);
end.

