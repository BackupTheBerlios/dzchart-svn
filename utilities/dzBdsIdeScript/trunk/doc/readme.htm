<HTML>
<HEAD>
<TITLE>Scripting the Delphi Editor</TITLE>
<STYLE>
body
{
  color: 'black';
  background: 'white';
  font-family: 'Verdana, Arial';
  font-size: '9pt';
}

h1
{
  color: 'navy';
  font-size: '14pt';
  font-syle: 'bold';
}

h2
{
  color: 'navy';
  font-size: '12pt';
  font-syle: 'bold';
}

table
{
  font-size: '9pt';
}

td
{
  vertical-align: 'top';
}
</STYLE>
</HEAD>
<BODY>
<H1>Scripting the Delphi Editor</H1>
<A NAME='Overview'><H1>Overview</H1></A>
<P>
This document describes an Open Tools API extension to Delphi 5,
which allows VBScript scripts to run and manipulate the
Delphi editor selection. This OTA extension can be found in
<A HREF='http://codecentral.borland.com/'>Borland's
CodeCentral</A> site, as snippet number 15222.
</P>

<P>
This snippet was brought to you by <A
HREF='mailto:marcelo.lopezruiz@xlnet.com.ar'>Marcelo Lopez Ruiz</A>.
Comments, bugs, money, fixes, rants, women and requests for
assistance are always welcome.
</P>

<HR>
<A NAME='Document Index'><H1>Document Index</H1></A>
<P>
<A HREF='#Overview'>Overview</A><BR>
<A HREF='#Document Index'>Document Index</A><BR>
<A HREF='#OTA Description'>OTA Description</A><BR>
<A HREF='#Setup Instructions'>Setup Instructions</A><BR>
&nbsp;&nbsp;<A HREF='#Package Setup'>Package Setup</A><BR>
&nbsp;&nbsp;<A HREF='#ActiveX library setup'>ActiveX library setup</A><BR>
&nbsp;&nbsp;<A HREF='#Registry settings'>Registry settings</A><BR>
&nbsp;&nbsp;<A HREF='#Scripts Setup'>Scripts Setup</A><BR>
&nbsp;&nbsp;<A HREF='#HOWTO1'>HOWTO: Install package if you already
have the script control installed</A><BR>
<A HREF='#Selection Object'>Selection Object</A><BR>
<A HREF='#Examples'>Examples</A><BR>
<A HREF='#Release History'>Release History</A><BR>
</P>

<HR>
<A NAME='OTA Description'><H1>OTA Description</H1></A>
<P>
The scripting OTA snip is based on a previous snip (CodeCentral
code 14674). However, this new OTA tool is released under a
new snip, becuase it provides significant more functionality,
and has a more extensive set of requirements.
</P>

<P>
The OTA works by installing itself in a menu, <B>MLR</B>. It
will then create a sub-menu with all the scripting files
available in a given folder (this folder can be configured
from the system Registry).
</P>

<P>
When the user select a script, it will be executed with the
system's scripting control. A global object, <B>Selection</B>,
is availabe to manipulate the user's selecion. This object
is loosely based on the familiar <B>TStrings</B> class.
</P>

<P>
This OTA radically simplifies the development of new extensions
(I've always wanted to say <I>radically simplifies</I> <B>:-)</B> ).
Developers familiar with Visual Basic or Active Server Pages will find
many uses for scripting files, to produce code, save it, and manipulate
it in various ways. A few samples are included in this snip, to
show some common functions.
</P>

<P>
If you create any useful snips, please, contribute them back
to CodeCentral!
</P>

<HR>
<A NAME='Setup Instructions'><H1>Setup Instructions</H1></A>
<A NAME='Package Setup'><H2>Package Setup</H2></A>
<P>
To install the OTA, you need to build the
<B>MyOTAPack.dpk</B> package, and install it.</P>

<OL>
  <LI>Place all files in a folder.</LI>
  <LI>Decompress the <B>StrLib.zip</B> files into their own
    folder.</LI>
  <LI>Register the <B>MLRStringsLib.dll</B> library.</LI>
  <LI>Open the <B>MyOTAPack.dpk</B> package from Delphi,
    then build and install.</LI>
</OL>

<A NAME='ActiveX library setup'><H2>ActiveX library setup</H2></A>
<P>
The <B>Selection</B> object
is based on an Automation class. This class is found in the
<B>StrLib</B> folder, and must be registered in the system.
To register the library, run the following command at the
command prompt:<PRE>
regsvr32 MLRStringsLib.dll
</PRE>
</P>

<P>
The OTA uses the <B>Microsoft Script Control</B>. Depending
on what software you have installed in your PC, you may
already have it. If you don't, you can download it for
free from the <A HREF='http://msdn.microsoft.com/scripting/'>Microsoft
Scripting Technologies</A> web site.
</P>

<A NAME='Registry settings'><H2>Registry settings</H2></A>
<P>
The following values are used by the OTA:
</P>
<TABLE>
  <TR>
    <TH>Path</TH>
    <TH>Meaning</TH>
  </TR><TR>
    <TD>
      HKEY_CURRENT_USER\Software\Borland\Delphi\5.0\MLRScriptsFolder<BR>
      Name: Folder
    </TD>
    <TD>
      The folder from which scripts are read and put into the
      <B>MLR</B> menu. By default, it is the <B>Scripts</B> folder
      under
    </TD>
  </TR><TR>
    <TD>
      HKEY_CURRENT_USER\Software\Borland\Delphi\5.0\MLRWebSearch\Options<BR>
      Name: Refresh
    </TD>
    <TD>
      The number of seconds between refreshes. It is recommended that
      you set this to <B>0</B> and then use the <B>(customize)</B> menu
      item to manually refresh the scripts. The problem is that the
      OTA might attempt to refresh the menu items while you are selecting
      one, which is not fun.
    </TD>
  </TR>
</TABLE>

<A NAME='Scripts Setup'><H2>Scripts Setup</H2></A>
<P>
The scripts provided with this CodeCentral submission should
be placed, all together, in a folder specified by the
<B>Folder</B> registry setting. You might want to change
this setting, as it's a pain to put stuff in so deep a folder.
Scripts  are identified by their <B>.vbs</B> extension (which identifies
them as directly executable - useful for testing).
</P>

<P>
Scripts should always expose a <B>Main</B> "sub" (a routine). This
is the starting point for the script.
</P>

<A NAME='HOWTO1'><H2>HOWTO: Install package if you already
have the script control installed</H2></A>

<P>
If you have imported the MS Script Control type library, the
package will not be installed (Delphi reports there is a unit
with the same name installed).
</P>

<P>
To install, in this case, do the following:
</P>

<OL>
  <LI>Rename <CODE>MSScriptControl_TLB.pas</CODE> to
    <CODE>TheMSScriptControl_TLB.pas</CODE></LI>
  <LI>Open <CODE>TheMSScriptControl_TLB.pas</CODE> and change the unit name
    to <CODE>TheMSScriptControl_TLB</CODE>.</LI>
  <LI>Open <CODE>WebSearchDMUnit.pas</CODE> and change, in the
    <CODE>uses</CODE> clause of the <CODE>implementation</CODE> section,
    the reference from <CODE>MSScriptControl_TLB</CODE> to
    <CODE>TheMSScriptControl_TLB</CODE>.</LI>
</OL>

<HR>
<A NAME='Selection Object'><H1>Selection Object</H1></A>
<P>
The <B>Selection</B> object is a global object available to the
scripts. It support the following functions/properties, with
the same semantics as <B>TStrings</B>:

<UL>
  <LI><B>Add</B></LI>
  <LI><B>Clear</B></LI>
  <LI><B>Delete</B></LI>
  <LI><B>Exchange</B></LI>
  <LI><B>LoadFromFile</B></LI>
  <LI><B>SaveToFile</B></LI>
  <LI><B>Count</B></LI>
  <LI><B>Text</B></LI>
  <LI><B>Modified</B></LI>
  <LI><B>Strings</B></LI>
</UL>

It also has a <B>Modified</B> property, which is set to <B>False</B>
when the script runs. If the strings are modified, then they
are placed back into the editor. If you wish to cancel changes,
you can set <B>Modified</B> to <B>False</B> before exiting
the script.
</P>

<HR>
<A NAME='Examples'><H1>Examples</H1></A>
<P>
This CodeCentral snip also includes a number of scripts showing
some way in which the scripting OTA can be used.
</P>

<TABLE>
  <TR>
    <TH>Script</TH>
    <TH>Description</TH>
  </TR><TR>
    <TD>HelloWorld.vbs</TD>
    <TD>This is one of the most basic scripts; it should
      work without problems in any machine.</TD>
  </TR><TR>
    <TD>CommentLines.vbs</TD>
    <TD>This will place a double slash at the beginning
      of all selected lines. It shows how to manipulate
      the <B>Selection</B> object to change the editor's
      content.</TD>
  </TR><TR>
    <TD>UnCommentLines.vbs</TD>
    <TD>Does the opposite of CommentLines.vbs.</TD>
  </TR><TR>
    <TD>ShowForm.vbs</TD>
    <TD>This script shows a bit of parsing. It will take
      the first token from the selection, assuming it
      is a form's name, and then replace the selection
      with a routine to show creat and show the form.</TD>
  </TR><TR>
    <TD>SaveToFile.vbs</TD>
    <TD>This script shows how to use the <B>FileSystemObject</B>
      object (provided by the scripting runtime) to save
      the selection to a file.</TD>
  </TR><TR>
    <TD>SnipIntoDb.vbs</TD>
    <TD>Assuming there is an Access database placed on your
      root, this will store the selection into it. It's not
      much, but it shows you how you can use <B>ActiveX
      Data Objects</B> (ADO) from the scripts. The sample
      database is <B>MySnips.mdb</B>.</TD>
  </TR><TR>
    <TD>TempStringList.vbs</TD>
    <TD>This will take the name of a <B>TStrings</B> or
      <B>TStringList</B> variable,
      and create a <B>TStringList</B> on it, then
      use it in a resource-protected block, and free
      it.</TD>
  </TR><TR>
    <TD>ClassToList.vbs</TD>
    <TD>This will build a <B>TObjectList</B>-like wrapper around
      the selected class. It shows how to use a simple
      technique to keep a template in another file
      (in this case <B>ClassToList.txt</B>). You have to
      change the reference in the file if you put your
      script files in another folder. The name of the
      class should <B>not</B> include the prepended <B>T</B>.</TD>
  </TR>
</TABLE>

<HR>
<A NAME='Release History'><H1>Release History</H1></A>
<UL>
  <LI>2000.09.25: Added some new scripts (ClassToList.vbs and
    TempStringList.vbs). Included instructions
    of on how to build when the script control had already
    been imported.</LI>
</UL>
<UL>
  <LI>2000.09.15: First release.</LI>
</UL>

</BODY>
</HTML>